{"version":3,"sources":["index.js"],"names":["Square","props","color","value","className","onClick","winner","Board","i","this","squares","winners","includes","Array","fill","map","e","ee","ii","Fragment","renderSquare","React","Component","Game","state","history","desc","stepNumber","redIsNext","started","slice","length","calculateWinner","freeCell","calculateFallCell","setState","concat","Math","floor","step","selected","y","x","orizzontal","vertical","diagonalTdLtr","diagonalBuLtr","reduce","a","c","status","current","moves","move","jumpTo","handleClick","Timer","timer","timerID","setInterval","tick","clearInterval","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0df812f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n \r\nfunction Square(props) {\r\n    const color = props.value \r\n        ? (props.value === 'Red' \r\n            ? \"red\" \r\n            : \"yellow\") \r\n        : \"white\";\r\n\r\n    return (\r\n        <button \r\n            className={'square ' + color}  \r\n            onClick={props.onClick}>\r\n            {props.winner && \"âœ“\"}\r\n        </button>\r\n    );\r\n}\r\n  \r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square \r\n                value={this.props.squares[i]} \r\n                winner={this.props.winners?.includes(i)}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n  \r\n    render() {\r\n        return (\r\n            <div className=\"game-board\">\r\n                {Array(6).fill().map((e, i) => {\r\n                    return (\r\n                        <div className=\"board-row\" key={i}>\r\n                            {Array(7).fill().map((ee, ii) => {\r\n                                return (\r\n                                    <React.Fragment key={i*7 + ii}>\r\n                                        {this.renderSquare(i*7 + ii)}\r\n                                    </React.Fragment>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n      );\r\n    }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                desc: \"Go to start\",\r\n                squares: Array(42).fill(null)\r\n            }],\r\n            stepNumber: 0,\r\n            redIsNext: true,\r\n            started: false\r\n        }\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        if (this.calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        const freeCell = this.calculateFallCell(squares, i);\r\n        squares[freeCell] = this.state.redIsNext ? 'Red' : 'Yellow';\r\n\r\n        this.setState({\r\n            history: history.concat([{\r\n                desc: squares[freeCell] + \" in column \" \r\n                    + (freeCell - Math.floor(freeCell/7)*7 + 1) \r\n                    + \", row \" + (Math.floor(freeCell/7) + 1),\r\n                squares: squares\r\n            }]),\r\n            stepNumber: history.length,\r\n            redIsNext: !this.state.redIsNext,\r\n            started: true\r\n        });\r\n\r\n        if (this.calculateWinner(squares) || !squares.includes(null)) {\r\n            this.setState({\r\n                started: false\r\n            })\r\n        }\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n          stepNumber: step,\r\n          redIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    calculateFallCell(squares, selected) {\r\n        for (let i = selected; i < squares.length; i += 7) {\r\n            if (i+7 < squares.length) {\r\n                if (squares[i+7]) {\r\n                    return i;\r\n                }\r\n            } else {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    \r\n    calculateWinner(squares) {\r\n        for (let i = 0; i < squares.length; i++) {\r\n    \r\n            let y = Math.floor(i/7);\r\n            let x = i - y*7;\r\n    \r\n            if (squares[i]) {\r\n                let orizzontal = [i+1, i+2, i+3];\r\n                let vertical = [i+7, i+14, i+21];\r\n                let diagonalTdLtr = [i+7+1, i+14+2, i+21+3];\r\n                let diagonalBuLtr = [i-7+1, i-14+2, i-21+3];\r\n    \r\n                if (x < 4 && orizzontal.reduce((a, c) => squares[i] === squares[c] && a, true)) return [i].concat(orizzontal);\r\n                if (y < 3 && vertical.reduce((a, c) => squares[i] === squares[c] && a, true)) return [i].concat(vertical);\r\n                if (x < 4 && y < 3 && diagonalTdLtr.reduce((a, c) => squares[i] === squares[c] && a, true)) return [i].concat(diagonalTdLtr);\r\n                if (x < 4 && y > 2 && diagonalBuLtr.reduce((a, c) => squares[i] === squares[c] && a, true)) return [i].concat(diagonalBuLtr); \r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = this.calculateWinner(current.squares);\r\n        \r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n              'Go to move #' + move  + ' (' + step.desc + ')' :\r\n              step.desc;\r\n            return (\r\n              <li key={move}>\r\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n              </li>\r\n            );\r\n          });\r\n        \r\n        let status;\r\n        if (winner) {\r\n            status = <b>{current.squares[winner[0]]} wins!</b>;\r\n        } \r\n        else if (!current.squares.includes(null)) {\r\n            status = \"Game ended in a draw\";\r\n        } else {\r\n            status = \"Next move: \" + (this.state.redIsNext ? 'Red' : 'Yellow');\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <h1>Connect 4</h1>\r\n            <h3>{status}</h3>\r\n            <div className=\"game\">\r\n            <div>\r\n                <Board \r\n                    squares={current.squares}\r\n                    winners={winner}\r\n                    onClick={(i) => this.handleClick(i)}\r\n                />\r\n                <Timer started={this.state.started} />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                {moves.length > 1 && \r\n                    (<div><b>History:</b></div>)}\r\n                <ul>{moves.slice(0, moves.length - 1)}</ul>\r\n            </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n  \r\nclass Timer extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {timer: 0};\r\n    }\r\n  \r\n    componentDidMount() {\r\n      this.timerID = setInterval(\r\n        () => this.tick(),\r\n        1000\r\n      );\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      clearInterval(this.timerID);\r\n    }\r\n  \r\n    tick() {\r\n        if (this.props.started) {\r\n            this.setState((state) => ({timer: state.timer + 1}));\r\n        }\r\n    }\r\n  \r\n    render() {\r\n        return (\r\n            <div className=\"timer\">Game started from {this.state.timer} sec.</div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}